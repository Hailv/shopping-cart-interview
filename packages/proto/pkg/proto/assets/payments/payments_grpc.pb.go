// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: payments/payments.proto

package payments

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentsService_HealthCheck_FullMethodName           = "/payments.PaymentsService/HealthCheck"
	PaymentsService_CreatePayment_FullMethodName         = "/payments.PaymentsService/CreatePayment"
	PaymentsService_GetPayment_FullMethodName            = "/payments.PaymentsService/GetPayment"
	PaymentsService_ListPaymentsByInvoice_FullMethodName = "/payments.PaymentsService/ListPaymentsByInvoice"
	PaymentsService_UpdatePaymentStatus_FullMethodName   = "/payments.PaymentsService/UpdatePaymentStatus"
)

// PaymentsServiceClient is the client API for PaymentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PaymentsService provides comprehensive payment processing functionality including
// transaction creation, status tracking, and payment lifecycle management
type PaymentsServiceClient interface {
	// Health check endpoint to verify service availability and payment processing status
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Create a new payment transaction with user and payment method details
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	// Get a payment transaction by its unique identifier with full details
	GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error)
	// List all payment transactions associated with a specific invoice
	ListPaymentsByInvoice(ctx context.Context, in *ListPaymentsByInvoiceRequest, opts ...grpc.CallOption) (*ListPaymentsByInvoiceResponse, error)
	// Update the status of an existing payment transaction
	UpdatePaymentStatus(ctx context.Context, in *UpdatePaymentStatusRequest, opts ...grpc.CallOption) (*UpdatePaymentStatusResponse, error)
}

type paymentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentsServiceClient(cc grpc.ClientConnInterface) PaymentsServiceClient {
	return &paymentsServiceClient{cc}
}

func (c *paymentsServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, PaymentsService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, PaymentsService_CreatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentResponse)
	err := c.cc.Invoke(ctx, PaymentsService_GetPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) ListPaymentsByInvoice(ctx context.Context, in *ListPaymentsByInvoiceRequest, opts ...grpc.CallOption) (*ListPaymentsByInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPaymentsByInvoiceResponse)
	err := c.cc.Invoke(ctx, PaymentsService_ListPaymentsByInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) UpdatePaymentStatus(ctx context.Context, in *UpdatePaymentStatusRequest, opts ...grpc.CallOption) (*UpdatePaymentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePaymentStatusResponse)
	err := c.cc.Invoke(ctx, PaymentsService_UpdatePaymentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentsServiceServer is the server API for PaymentsService service.
// All implementations must embed UnimplementedPaymentsServiceServer
// for forward compatibility.
//
// PaymentsService provides comprehensive payment processing functionality including
// transaction creation, status tracking, and payment lifecycle management
type PaymentsServiceServer interface {
	// Health check endpoint to verify service availability and payment processing status
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Create a new payment transaction with user and payment method details
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	// Get a payment transaction by its unique identifier with full details
	GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error)
	// List all payment transactions associated with a specific invoice
	ListPaymentsByInvoice(context.Context, *ListPaymentsByInvoiceRequest) (*ListPaymentsByInvoiceResponse, error)
	// Update the status of an existing payment transaction
	UpdatePaymentStatus(context.Context, *UpdatePaymentStatusRequest) (*UpdatePaymentStatusResponse, error)
	mustEmbedUnimplementedPaymentsServiceServer()
}

// UnimplementedPaymentsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentsServiceServer struct{}

func (UnimplementedPaymentsServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedPaymentsServiceServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaymentsServiceServer) GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (UnimplementedPaymentsServiceServer) ListPaymentsByInvoice(context.Context, *ListPaymentsByInvoiceRequest) (*ListPaymentsByInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentsByInvoice not implemented")
}
func (UnimplementedPaymentsServiceServer) UpdatePaymentStatus(context.Context, *UpdatePaymentStatusRequest) (*UpdatePaymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentStatus not implemented")
}
func (UnimplementedPaymentsServiceServer) mustEmbedUnimplementedPaymentsServiceServer() {}
func (UnimplementedPaymentsServiceServer) testEmbeddedByValue()                         {}

// UnsafePaymentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentsServiceServer will
// result in compilation errors.
type UnsafePaymentsServiceServer interface {
	mustEmbedUnimplementedPaymentsServiceServer()
}

func RegisterPaymentsServiceServer(s grpc.ServiceRegistrar, srv PaymentsServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentsService_ServiceDesc, srv)
}

func _PaymentsService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentsService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentsService_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentsService_GetPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).GetPayment(ctx, req.(*GetPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_ListPaymentsByInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentsByInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).ListPaymentsByInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentsService_ListPaymentsByInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).ListPaymentsByInvoice(ctx, req.(*ListPaymentsByInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_UpdatePaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).UpdatePaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentsService_UpdatePaymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).UpdatePaymentStatus(ctx, req.(*UpdatePaymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentsService_ServiceDesc is the grpc.ServiceDesc for PaymentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments.PaymentsService",
	HandlerType: (*PaymentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _PaymentsService_HealthCheck_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentsService_CreatePayment_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _PaymentsService_GetPayment_Handler,
		},
		{
			MethodName: "ListPaymentsByInvoice",
			Handler:    _PaymentsService_ListPaymentsByInvoice_Handler,
		},
		{
			MethodName: "UpdatePaymentStatus",
			Handler:    _PaymentsService_UpdatePaymentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payments/payments.proto",
}

const (
	WebhooksService_HealthCheck_FullMethodName                       = "/payments.WebhooksService/HealthCheck"
	WebhooksService_ReceiveWebhook_FullMethodName                    = "/payments.WebhooksService/ReceiveWebhook"
	WebhooksService_GetWebhook_FullMethodName                        = "/payments.WebhooksService/GetWebhook"
	WebhooksService_ListWebhooksByPartner_FullMethodName             = "/payments.WebhooksService/ListWebhooksByPartner"
	WebhooksService_ListWebhooksByPartnerAndEventType_FullMethodName = "/payments.WebhooksService/ListWebhooksByPartnerAndEventType"
	WebhooksService_ListWebhooksByPartnerCode_FullMethodName         = "/payments.WebhooksService/ListWebhooksByPartnerCode"
)

// WebhooksServiceClient is the client API for WebhooksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WebhooksService handles webhook event processing from external payment partners,
// providing secure webhook receipt, validation, and event management functionality
type WebhooksServiceClient interface {
	// Health check endpoint to verify webhook service availability and processing status
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Receive and process a webhook event from an external payment partner
	ReceiveWebhook(ctx context.Context, in *ReceiveWebhookRequest, opts ...grpc.CallOption) (*ReceiveWebhookResponse, error)
	// Get details of a specific webhook event by its unique identifier
	GetWebhook(ctx context.Context, in *GetWebhookRequest, opts ...grpc.CallOption) (*GetWebhookResponse, error)
	// List all webhook events received from a specific payment partner
	ListWebhooksByPartner(ctx context.Context, in *ListWebhooksByPartnerRequest, opts ...grpc.CallOption) (*ListWebhooksByPartnerResponse, error)
	// List webhook events from a partner filtered by specific event type
	ListWebhooksByPartnerAndEventType(ctx context.Context, in *ListWebhooksByPartnerAndEventTypeRequest, opts ...grpc.CallOption) (*ListWebhooksByPartnerAndEventTypeResponse, error)
	// List webhook events from a partner identified by partner code
	ListWebhooksByPartnerCode(ctx context.Context, in *ListWebhooksByPartnerCodeRequest, opts ...grpc.CallOption) (*ListWebhooksByPartnerCodeResponse, error)
}

type webhooksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhooksServiceClient(cc grpc.ClientConnInterface) WebhooksServiceClient {
	return &webhooksServiceClient{cc}
}

func (c *webhooksServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, WebhooksService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhooksServiceClient) ReceiveWebhook(ctx context.Context, in *ReceiveWebhookRequest, opts ...grpc.CallOption) (*ReceiveWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveWebhookResponse)
	err := c.cc.Invoke(ctx, WebhooksService_ReceiveWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhooksServiceClient) GetWebhook(ctx context.Context, in *GetWebhookRequest, opts ...grpc.CallOption) (*GetWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWebhookResponse)
	err := c.cc.Invoke(ctx, WebhooksService_GetWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhooksServiceClient) ListWebhooksByPartner(ctx context.Context, in *ListWebhooksByPartnerRequest, opts ...grpc.CallOption) (*ListWebhooksByPartnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWebhooksByPartnerResponse)
	err := c.cc.Invoke(ctx, WebhooksService_ListWebhooksByPartner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhooksServiceClient) ListWebhooksByPartnerAndEventType(ctx context.Context, in *ListWebhooksByPartnerAndEventTypeRequest, opts ...grpc.CallOption) (*ListWebhooksByPartnerAndEventTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWebhooksByPartnerAndEventTypeResponse)
	err := c.cc.Invoke(ctx, WebhooksService_ListWebhooksByPartnerAndEventType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhooksServiceClient) ListWebhooksByPartnerCode(ctx context.Context, in *ListWebhooksByPartnerCodeRequest, opts ...grpc.CallOption) (*ListWebhooksByPartnerCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWebhooksByPartnerCodeResponse)
	err := c.cc.Invoke(ctx, WebhooksService_ListWebhooksByPartnerCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhooksServiceServer is the server API for WebhooksService service.
// All implementations must embed UnimplementedWebhooksServiceServer
// for forward compatibility.
//
// WebhooksService handles webhook event processing from external payment partners,
// providing secure webhook receipt, validation, and event management functionality
type WebhooksServiceServer interface {
	// Health check endpoint to verify webhook service availability and processing status
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Receive and process a webhook event from an external payment partner
	ReceiveWebhook(context.Context, *ReceiveWebhookRequest) (*ReceiveWebhookResponse, error)
	// Get details of a specific webhook event by its unique identifier
	GetWebhook(context.Context, *GetWebhookRequest) (*GetWebhookResponse, error)
	// List all webhook events received from a specific payment partner
	ListWebhooksByPartner(context.Context, *ListWebhooksByPartnerRequest) (*ListWebhooksByPartnerResponse, error)
	// List webhook events from a partner filtered by specific event type
	ListWebhooksByPartnerAndEventType(context.Context, *ListWebhooksByPartnerAndEventTypeRequest) (*ListWebhooksByPartnerAndEventTypeResponse, error)
	// List webhook events from a partner identified by partner code
	ListWebhooksByPartnerCode(context.Context, *ListWebhooksByPartnerCodeRequest) (*ListWebhooksByPartnerCodeResponse, error)
	mustEmbedUnimplementedWebhooksServiceServer()
}

// UnimplementedWebhooksServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebhooksServiceServer struct{}

func (UnimplementedWebhooksServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedWebhooksServiceServer) ReceiveWebhook(context.Context, *ReceiveWebhookRequest) (*ReceiveWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveWebhook not implemented")
}
func (UnimplementedWebhooksServiceServer) GetWebhook(context.Context, *GetWebhookRequest) (*GetWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhook not implemented")
}
func (UnimplementedWebhooksServiceServer) ListWebhooksByPartner(context.Context, *ListWebhooksByPartnerRequest) (*ListWebhooksByPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooksByPartner not implemented")
}
func (UnimplementedWebhooksServiceServer) ListWebhooksByPartnerAndEventType(context.Context, *ListWebhooksByPartnerAndEventTypeRequest) (*ListWebhooksByPartnerAndEventTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooksByPartnerAndEventType not implemented")
}
func (UnimplementedWebhooksServiceServer) ListWebhooksByPartnerCode(context.Context, *ListWebhooksByPartnerCodeRequest) (*ListWebhooksByPartnerCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooksByPartnerCode not implemented")
}
func (UnimplementedWebhooksServiceServer) mustEmbedUnimplementedWebhooksServiceServer() {}
func (UnimplementedWebhooksServiceServer) testEmbeddedByValue()                         {}

// UnsafeWebhooksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhooksServiceServer will
// result in compilation errors.
type UnsafeWebhooksServiceServer interface {
	mustEmbedUnimplementedWebhooksServiceServer()
}

func RegisterWebhooksServiceServer(s grpc.ServiceRegistrar, srv WebhooksServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebhooksServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebhooksService_ServiceDesc, srv)
}

func _WebhooksService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhooksServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhooksService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhooksServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhooksService_ReceiveWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhooksServiceServer).ReceiveWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhooksService_ReceiveWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhooksServiceServer).ReceiveWebhook(ctx, req.(*ReceiveWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhooksService_GetWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhooksServiceServer).GetWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhooksService_GetWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhooksServiceServer).GetWebhook(ctx, req.(*GetWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhooksService_ListWebhooksByPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhooksByPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhooksServiceServer).ListWebhooksByPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhooksService_ListWebhooksByPartner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhooksServiceServer).ListWebhooksByPartner(ctx, req.(*ListWebhooksByPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhooksService_ListWebhooksByPartnerAndEventType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhooksByPartnerAndEventTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhooksServiceServer).ListWebhooksByPartnerAndEventType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhooksService_ListWebhooksByPartnerAndEventType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhooksServiceServer).ListWebhooksByPartnerAndEventType(ctx, req.(*ListWebhooksByPartnerAndEventTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhooksService_ListWebhooksByPartnerCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhooksByPartnerCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhooksServiceServer).ListWebhooksByPartnerCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhooksService_ListWebhooksByPartnerCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhooksServiceServer).ListWebhooksByPartnerCode(ctx, req.(*ListWebhooksByPartnerCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhooksService_ServiceDesc is the grpc.ServiceDesc for WebhooksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhooksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments.WebhooksService",
	HandlerType: (*WebhooksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _WebhooksService_HealthCheck_Handler,
		},
		{
			MethodName: "ReceiveWebhook",
			Handler:    _WebhooksService_ReceiveWebhook_Handler,
		},
		{
			MethodName: "GetWebhook",
			Handler:    _WebhooksService_GetWebhook_Handler,
		},
		{
			MethodName: "ListWebhooksByPartner",
			Handler:    _WebhooksService_ListWebhooksByPartner_Handler,
		},
		{
			MethodName: "ListWebhooksByPartnerAndEventType",
			Handler:    _WebhooksService_ListWebhooksByPartnerAndEventType_Handler,
		},
		{
			MethodName: "ListWebhooksByPartnerCode",
			Handler:    _WebhooksService_ListWebhooksByPartnerCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payments/payments.proto",
}
