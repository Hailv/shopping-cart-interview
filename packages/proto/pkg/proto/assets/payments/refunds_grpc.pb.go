// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: payments/refunds.proto

package payments

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RefundService_CreateRefund_FullMethodName         = "/payments.RefundService/CreateRefund"
	RefundService_GetRefund_FullMethodName            = "/payments.RefundService/GetRefund"
	RefundService_ListRefundsByPayment_FullMethodName = "/payments.RefundService/ListRefundsByPayment"
	RefundService_UpdateRefundStatus_FullMethodName   = "/payments.RefundService/UpdateRefundStatus"
)

// RefundServiceClient is the client API for RefundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RefundService provides methods for managing refunds
type RefundServiceClient interface {
	// CreateRefund creates a new refund
	CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error)
	// GetRefund retrieves a refund by ID
	GetRefund(ctx context.Context, in *GetRefundRequest, opts ...grpc.CallOption) (*GetRefundResponse, error)
	// ListRefundsByPayment lists all refunds for a payment
	ListRefundsByPayment(ctx context.Context, in *ListRefundsByPaymentRequest, opts ...grpc.CallOption) (*ListRefundsByPaymentResponse, error)
	// UpdateRefundStatus updates the status of a refund
	UpdateRefundStatus(ctx context.Context, in *UpdateRefundStatusRequest, opts ...grpc.CallOption) (*UpdateRefundStatusResponse, error)
}

type refundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRefundServiceClient(cc grpc.ClientConnInterface) RefundServiceClient {
	return &refundServiceClient{cc}
}

func (c *refundServiceClient) CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRefundResponse)
	err := c.cc.Invoke(ctx, RefundService_CreateRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundServiceClient) GetRefund(ctx context.Context, in *GetRefundRequest, opts ...grpc.CallOption) (*GetRefundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRefundResponse)
	err := c.cc.Invoke(ctx, RefundService_GetRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundServiceClient) ListRefundsByPayment(ctx context.Context, in *ListRefundsByPaymentRequest, opts ...grpc.CallOption) (*ListRefundsByPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRefundsByPaymentResponse)
	err := c.cc.Invoke(ctx, RefundService_ListRefundsByPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundServiceClient) UpdateRefundStatus(ctx context.Context, in *UpdateRefundStatusRequest, opts ...grpc.CallOption) (*UpdateRefundStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRefundStatusResponse)
	err := c.cc.Invoke(ctx, RefundService_UpdateRefundStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefundServiceServer is the server API for RefundService service.
// All implementations must embed UnimplementedRefundServiceServer
// for forward compatibility.
//
// RefundService provides methods for managing refunds
type RefundServiceServer interface {
	// CreateRefund creates a new refund
	CreateRefund(context.Context, *CreateRefundRequest) (*CreateRefundResponse, error)
	// GetRefund retrieves a refund by ID
	GetRefund(context.Context, *GetRefundRequest) (*GetRefundResponse, error)
	// ListRefundsByPayment lists all refunds for a payment
	ListRefundsByPayment(context.Context, *ListRefundsByPaymentRequest) (*ListRefundsByPaymentResponse, error)
	// UpdateRefundStatus updates the status of a refund
	UpdateRefundStatus(context.Context, *UpdateRefundStatusRequest) (*UpdateRefundStatusResponse, error)
	mustEmbedUnimplementedRefundServiceServer()
}

// UnimplementedRefundServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRefundServiceServer struct{}

func (UnimplementedRefundServiceServer) CreateRefund(context.Context, *CreateRefundRequest) (*CreateRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefund not implemented")
}
func (UnimplementedRefundServiceServer) GetRefund(context.Context, *GetRefundRequest) (*GetRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefund not implemented")
}
func (UnimplementedRefundServiceServer) ListRefundsByPayment(context.Context, *ListRefundsByPaymentRequest) (*ListRefundsByPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefundsByPayment not implemented")
}
func (UnimplementedRefundServiceServer) UpdateRefundStatus(context.Context, *UpdateRefundStatusRequest) (*UpdateRefundStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefundStatus not implemented")
}
func (UnimplementedRefundServiceServer) mustEmbedUnimplementedRefundServiceServer() {}
func (UnimplementedRefundServiceServer) testEmbeddedByValue()                       {}

// UnsafeRefundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefundServiceServer will
// result in compilation errors.
type UnsafeRefundServiceServer interface {
	mustEmbedUnimplementedRefundServiceServer()
}

func RegisterRefundServiceServer(s grpc.ServiceRegistrar, srv RefundServiceServer) {
	// If the following call pancis, it indicates UnimplementedRefundServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RefundService_ServiceDesc, srv)
}

func _RefundService_CreateRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServiceServer).CreateRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundService_CreateRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServiceServer).CreateRefund(ctx, req.(*CreateRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundService_GetRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServiceServer).GetRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundService_GetRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServiceServer).GetRefund(ctx, req.(*GetRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundService_ListRefundsByPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRefundsByPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServiceServer).ListRefundsByPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundService_ListRefundsByPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServiceServer).ListRefundsByPayment(ctx, req.(*ListRefundsByPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundService_UpdateRefundStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRefundStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServiceServer).UpdateRefundStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundService_UpdateRefundStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServiceServer).UpdateRefundStatus(ctx, req.(*UpdateRefundStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RefundService_ServiceDesc is the grpc.ServiceDesc for RefundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RefundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments.RefundService",
	HandlerType: (*RefundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRefund",
			Handler:    _RefundService_CreateRefund_Handler,
		},
		{
			MethodName: "GetRefund",
			Handler:    _RefundService_GetRefund_Handler,
		},
		{
			MethodName: "ListRefundsByPayment",
			Handler:    _RefundService_ListRefundsByPayment_Handler,
		},
		{
			MethodName: "UpdateRefundStatus",
			Handler:    _RefundService_UpdateRefundStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payments/refunds.proto",
}
