// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: billing/billing_schedules.proto

package billing

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BillingSchedulesService_ListBillingSchedules_FullMethodName  = "/billing.BillingSchedulesService/ListBillingSchedules"
	BillingSchedulesService_CreateBillingSchedule_FullMethodName = "/billing.BillingSchedulesService/CreateBillingSchedule"
	BillingSchedulesService_GetBillingSchedule_FullMethodName    = "/billing.BillingSchedulesService/GetBillingSchedule"
	BillingSchedulesService_UpdateBillingSchedule_FullMethodName = "/billing.BillingSchedulesService/UpdateBillingSchedule"
	BillingSchedulesService_DeleteBillingSchedule_FullMethodName = "/billing.BillingSchedulesService/DeleteBillingSchedule"
)

// BillingSchedulesServiceClient is the client API for BillingSchedulesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingSchedulesServiceClient interface {
	// List all billing schedules
	ListBillingSchedules(ctx context.Context, in *ListBillingSchedulesRequest, opts ...grpc.CallOption) (*ListBillingSchedulesResponse, error)
	// Create a billing schedule
	CreateBillingSchedule(ctx context.Context, in *CreateBillingScheduleRequest, opts ...grpc.CallOption) (*CreateBillingScheduleResponse, error)
	// Get billing schedule by ID
	GetBillingSchedule(ctx context.Context, in *GetBillingScheduleRequest, opts ...grpc.CallOption) (*GetBillingScheduleResponse, error)
	// Update billing schedule
	UpdateBillingSchedule(ctx context.Context, in *UpdateBillingScheduleRequest, opts ...grpc.CallOption) (*UpdateBillingScheduleResponse, error)
	// Delete billing schedule
	DeleteBillingSchedule(ctx context.Context, in *DeleteBillingScheduleRequest, opts ...grpc.CallOption) (*DeleteBillingScheduleResponse, error)
}

type billingSchedulesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingSchedulesServiceClient(cc grpc.ClientConnInterface) BillingSchedulesServiceClient {
	return &billingSchedulesServiceClient{cc}
}

func (c *billingSchedulesServiceClient) ListBillingSchedules(ctx context.Context, in *ListBillingSchedulesRequest, opts ...grpc.CallOption) (*ListBillingSchedulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBillingSchedulesResponse)
	err := c.cc.Invoke(ctx, BillingSchedulesService_ListBillingSchedules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingSchedulesServiceClient) CreateBillingSchedule(ctx context.Context, in *CreateBillingScheduleRequest, opts ...grpc.CallOption) (*CreateBillingScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBillingScheduleResponse)
	err := c.cc.Invoke(ctx, BillingSchedulesService_CreateBillingSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingSchedulesServiceClient) GetBillingSchedule(ctx context.Context, in *GetBillingScheduleRequest, opts ...grpc.CallOption) (*GetBillingScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBillingScheduleResponse)
	err := c.cc.Invoke(ctx, BillingSchedulesService_GetBillingSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingSchedulesServiceClient) UpdateBillingSchedule(ctx context.Context, in *UpdateBillingScheduleRequest, opts ...grpc.CallOption) (*UpdateBillingScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBillingScheduleResponse)
	err := c.cc.Invoke(ctx, BillingSchedulesService_UpdateBillingSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingSchedulesServiceClient) DeleteBillingSchedule(ctx context.Context, in *DeleteBillingScheduleRequest, opts ...grpc.CallOption) (*DeleteBillingScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBillingScheduleResponse)
	err := c.cc.Invoke(ctx, BillingSchedulesService_DeleteBillingSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingSchedulesServiceServer is the server API for BillingSchedulesService service.
// All implementations must embed UnimplementedBillingSchedulesServiceServer
// for forward compatibility.
type BillingSchedulesServiceServer interface {
	// List all billing schedules
	ListBillingSchedules(context.Context, *ListBillingSchedulesRequest) (*ListBillingSchedulesResponse, error)
	// Create a billing schedule
	CreateBillingSchedule(context.Context, *CreateBillingScheduleRequest) (*CreateBillingScheduleResponse, error)
	// Get billing schedule by ID
	GetBillingSchedule(context.Context, *GetBillingScheduleRequest) (*GetBillingScheduleResponse, error)
	// Update billing schedule
	UpdateBillingSchedule(context.Context, *UpdateBillingScheduleRequest) (*UpdateBillingScheduleResponse, error)
	// Delete billing schedule
	DeleteBillingSchedule(context.Context, *DeleteBillingScheduleRequest) (*DeleteBillingScheduleResponse, error)
	mustEmbedUnimplementedBillingSchedulesServiceServer()
}

// UnimplementedBillingSchedulesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBillingSchedulesServiceServer struct{}

func (UnimplementedBillingSchedulesServiceServer) ListBillingSchedules(context.Context, *ListBillingSchedulesRequest) (*ListBillingSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillingSchedules not implemented")
}
func (UnimplementedBillingSchedulesServiceServer) CreateBillingSchedule(context.Context, *CreateBillingScheduleRequest) (*CreateBillingScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingSchedule not implemented")
}
func (UnimplementedBillingSchedulesServiceServer) GetBillingSchedule(context.Context, *GetBillingScheduleRequest) (*GetBillingScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingSchedule not implemented")
}
func (UnimplementedBillingSchedulesServiceServer) UpdateBillingSchedule(context.Context, *UpdateBillingScheduleRequest) (*UpdateBillingScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingSchedule not implemented")
}
func (UnimplementedBillingSchedulesServiceServer) DeleteBillingSchedule(context.Context, *DeleteBillingScheduleRequest) (*DeleteBillingScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBillingSchedule not implemented")
}
func (UnimplementedBillingSchedulesServiceServer) mustEmbedUnimplementedBillingSchedulesServiceServer() {
}
func (UnimplementedBillingSchedulesServiceServer) testEmbeddedByValue() {}

// UnsafeBillingSchedulesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingSchedulesServiceServer will
// result in compilation errors.
type UnsafeBillingSchedulesServiceServer interface {
	mustEmbedUnimplementedBillingSchedulesServiceServer()
}

func RegisterBillingSchedulesServiceServer(s grpc.ServiceRegistrar, srv BillingSchedulesServiceServer) {
	// If the following call pancis, it indicates UnimplementedBillingSchedulesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BillingSchedulesService_ServiceDesc, srv)
}

func _BillingSchedulesService_ListBillingSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBillingSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingSchedulesServiceServer).ListBillingSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingSchedulesService_ListBillingSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingSchedulesServiceServer).ListBillingSchedules(ctx, req.(*ListBillingSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingSchedulesService_CreateBillingSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillingScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingSchedulesServiceServer).CreateBillingSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingSchedulesService_CreateBillingSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingSchedulesServiceServer).CreateBillingSchedule(ctx, req.(*CreateBillingScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingSchedulesService_GetBillingSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingSchedulesServiceServer).GetBillingSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingSchedulesService_GetBillingSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingSchedulesServiceServer).GetBillingSchedule(ctx, req.(*GetBillingScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingSchedulesService_UpdateBillingSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingSchedulesServiceServer).UpdateBillingSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingSchedulesService_UpdateBillingSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingSchedulesServiceServer).UpdateBillingSchedule(ctx, req.(*UpdateBillingScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingSchedulesService_DeleteBillingSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBillingScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingSchedulesServiceServer).DeleteBillingSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingSchedulesService_DeleteBillingSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingSchedulesServiceServer).DeleteBillingSchedule(ctx, req.(*DeleteBillingScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingSchedulesService_ServiceDesc is the grpc.ServiceDesc for BillingSchedulesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingSchedulesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing.BillingSchedulesService",
	HandlerType: (*BillingSchedulesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBillingSchedules",
			Handler:    _BillingSchedulesService_ListBillingSchedules_Handler,
		},
		{
			MethodName: "CreateBillingSchedule",
			Handler:    _BillingSchedulesService_CreateBillingSchedule_Handler,
		},
		{
			MethodName: "GetBillingSchedule",
			Handler:    _BillingSchedulesService_GetBillingSchedule_Handler,
		},
		{
			MethodName: "UpdateBillingSchedule",
			Handler:    _BillingSchedulesService_UpdateBillingSchedule_Handler,
		},
		{
			MethodName: "DeleteBillingSchedule",
			Handler:    _BillingSchedulesService_DeleteBillingSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/billing_schedules.proto",
}
