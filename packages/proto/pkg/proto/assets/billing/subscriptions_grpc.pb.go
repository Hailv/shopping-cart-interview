// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: billing/subscriptions.proto

package billing

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubscriptionsService_ListSubscriptions_FullMethodName          = "/billing.SubscriptionsService/ListSubscriptions"
	SubscriptionsService_CreateSubscription_FullMethodName         = "/billing.SubscriptionsService/CreateSubscription"
	SubscriptionsService_GetSubscription_FullMethodName            = "/billing.SubscriptionsService/GetSubscription"
	SubscriptionsService_UpdateSubscription_FullMethodName         = "/billing.SubscriptionsService/UpdateSubscription"
	SubscriptionsService_CancelSubscription_FullMethodName         = "/billing.SubscriptionsService/CancelSubscription"
	SubscriptionsService_ActivateSubscription_FullMethodName       = "/billing.SubscriptionsService/ActivateSubscription"
	SubscriptionsService_TriggerInvoiceGeneration_FullMethodName   = "/billing.SubscriptionsService/TriggerInvoiceGeneration"
	SubscriptionsService_AttachOrdersToSubscription_FullMethodName = "/billing.SubscriptionsService/AttachOrdersToSubscription"
	SubscriptionsService_GetSubscriptionInvoices_FullMethodName    = "/billing.SubscriptionsService/GetSubscriptionInvoices"
)

// SubscriptionsServiceClient is the client API for SubscriptionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SubscriptionsService provides comprehensive subscription lifecycle management including
// creation, billing cycle management, status changes, and recurring invoice generation
type SubscriptionsServiceClient interface {
	// List all subscriptions with optional filtering and pagination
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	// Create a new subscription with billing schedule and customer details
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error)
	// Get detailed information about a specific subscription by ID
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	// Update subscription details including billing schedule, pricing, or customer information
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*UpdateSubscriptionResponse, error)
	// Cancel a subscription with optional immediate or end-of-period termination
	CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*CancelSubscriptionResponse, error)
	// Activate a previously paused or cancelled subscription to resume billing
	ActivateSubscription(ctx context.Context, in *ActivateSubscriptionRequest, opts ...grpc.CallOption) (*ActivateSubscriptionResponse, error)
	// Manually trigger invoice generation
	TriggerInvoiceGeneration(ctx context.Context, in *TriggerInvoiceGenerationRequest, opts ...grpc.CallOption) (*TriggerInvoiceGenerationResponse, error)
	// Attach orders to a subscription
	AttachOrdersToSubscription(ctx context.Context, in *AttachOrdersRequest, opts ...grpc.CallOption) (*AttachOrdersResponse, error)
	// Get invoice summaries for a subscription
	GetSubscriptionInvoices(ctx context.Context, in *GetSubscriptionInvoicesRequest, opts ...grpc.CallOption) (*GetSubscriptionInvoicesResponse, error)
}

type subscriptionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionsServiceClient(cc grpc.ClientConnInterface) SubscriptionsServiceClient {
	return &subscriptionsServiceClient{cc}
}

func (c *subscriptionsServiceClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, SubscriptionsService_ListSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionsService_CreateSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionsService_GetSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsServiceClient) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*UpdateSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionsService_UpdateSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsServiceClient) CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*CancelSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelSubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionsService_CancelSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsServiceClient) ActivateSubscription(ctx context.Context, in *ActivateSubscriptionRequest, opts ...grpc.CallOption) (*ActivateSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateSubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionsService_ActivateSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsServiceClient) TriggerInvoiceGeneration(ctx context.Context, in *TriggerInvoiceGenerationRequest, opts ...grpc.CallOption) (*TriggerInvoiceGenerationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerInvoiceGenerationResponse)
	err := c.cc.Invoke(ctx, SubscriptionsService_TriggerInvoiceGeneration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsServiceClient) AttachOrdersToSubscription(ctx context.Context, in *AttachOrdersRequest, opts ...grpc.CallOption) (*AttachOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachOrdersResponse)
	err := c.cc.Invoke(ctx, SubscriptionsService_AttachOrdersToSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsServiceClient) GetSubscriptionInvoices(ctx context.Context, in *GetSubscriptionInvoicesRequest, opts ...grpc.CallOption) (*GetSubscriptionInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscriptionInvoicesResponse)
	err := c.cc.Invoke(ctx, SubscriptionsService_GetSubscriptionInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionsServiceServer is the server API for SubscriptionsService service.
// All implementations must embed UnimplementedSubscriptionsServiceServer
// for forward compatibility.
//
// SubscriptionsService provides comprehensive subscription lifecycle management including
// creation, billing cycle management, status changes, and recurring invoice generation
type SubscriptionsServiceServer interface {
	// List all subscriptions with optional filtering and pagination
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	// Create a new subscription with billing schedule and customer details
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error)
	// Get detailed information about a specific subscription by ID
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	// Update subscription details including billing schedule, pricing, or customer information
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error)
	// Cancel a subscription with optional immediate or end-of-period termination
	CancelSubscription(context.Context, *CancelSubscriptionRequest) (*CancelSubscriptionResponse, error)
	// Activate a previously paused or cancelled subscription to resume billing
	ActivateSubscription(context.Context, *ActivateSubscriptionRequest) (*ActivateSubscriptionResponse, error)
	// Manually trigger invoice generation
	TriggerInvoiceGeneration(context.Context, *TriggerInvoiceGenerationRequest) (*TriggerInvoiceGenerationResponse, error)
	// Attach orders to a subscription
	AttachOrdersToSubscription(context.Context, *AttachOrdersRequest) (*AttachOrdersResponse, error)
	// Get invoice summaries for a subscription
	GetSubscriptionInvoices(context.Context, *GetSubscriptionInvoicesRequest) (*GetSubscriptionInvoicesResponse, error)
	mustEmbedUnimplementedSubscriptionsServiceServer()
}

// UnimplementedSubscriptionsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionsServiceServer struct{}

func (UnimplementedSubscriptionsServiceServer) ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedSubscriptionsServiceServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedSubscriptionsServiceServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedSubscriptionsServiceServer) UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (UnimplementedSubscriptionsServiceServer) CancelSubscription(context.Context, *CancelSubscriptionRequest) (*CancelSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscription not implemented")
}
func (UnimplementedSubscriptionsServiceServer) ActivateSubscription(context.Context, *ActivateSubscriptionRequest) (*ActivateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateSubscription not implemented")
}
func (UnimplementedSubscriptionsServiceServer) TriggerInvoiceGeneration(context.Context, *TriggerInvoiceGenerationRequest) (*TriggerInvoiceGenerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerInvoiceGeneration not implemented")
}
func (UnimplementedSubscriptionsServiceServer) AttachOrdersToSubscription(context.Context, *AttachOrdersRequest) (*AttachOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachOrdersToSubscription not implemented")
}
func (UnimplementedSubscriptionsServiceServer) GetSubscriptionInvoices(context.Context, *GetSubscriptionInvoicesRequest) (*GetSubscriptionInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionInvoices not implemented")
}
func (UnimplementedSubscriptionsServiceServer) mustEmbedUnimplementedSubscriptionsServiceServer() {}
func (UnimplementedSubscriptionsServiceServer) testEmbeddedByValue()                              {}

// UnsafeSubscriptionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionsServiceServer will
// result in compilation errors.
type UnsafeSubscriptionsServiceServer interface {
	mustEmbedUnimplementedSubscriptionsServiceServer()
}

func RegisterSubscriptionsServiceServer(s grpc.ServiceRegistrar, srv SubscriptionsServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriptionsService_ServiceDesc, srv)
}

func _SubscriptionsService_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServiceServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionsService_ListSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServiceServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionsService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionsService_CreateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionsService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionsService_GetSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionsService_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServiceServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionsService_UpdateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServiceServer).UpdateSubscription(ctx, req.(*UpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionsService_CancelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServiceServer).CancelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionsService_CancelSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServiceServer).CancelSubscription(ctx, req.(*CancelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionsService_ActivateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServiceServer).ActivateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionsService_ActivateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServiceServer).ActivateSubscription(ctx, req.(*ActivateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionsService_TriggerInvoiceGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerInvoiceGenerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServiceServer).TriggerInvoiceGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionsService_TriggerInvoiceGeneration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServiceServer).TriggerInvoiceGeneration(ctx, req.(*TriggerInvoiceGenerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionsService_AttachOrdersToSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServiceServer).AttachOrdersToSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionsService_AttachOrdersToSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServiceServer).AttachOrdersToSubscription(ctx, req.(*AttachOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionsService_GetSubscriptionInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServiceServer).GetSubscriptionInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionsService_GetSubscriptionInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServiceServer).GetSubscriptionInvoices(ctx, req.(*GetSubscriptionInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionsService_ServiceDesc is the grpc.ServiceDesc for SubscriptionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing.SubscriptionsService",
	HandlerType: (*SubscriptionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSubscriptions",
			Handler:    _SubscriptionsService_ListSubscriptions_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _SubscriptionsService_CreateSubscription_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _SubscriptionsService_GetSubscription_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _SubscriptionsService_UpdateSubscription_Handler,
		},
		{
			MethodName: "CancelSubscription",
			Handler:    _SubscriptionsService_CancelSubscription_Handler,
		},
		{
			MethodName: "ActivateSubscription",
			Handler:    _SubscriptionsService_ActivateSubscription_Handler,
		},
		{
			MethodName: "TriggerInvoiceGeneration",
			Handler:    _SubscriptionsService_TriggerInvoiceGeneration_Handler,
		},
		{
			MethodName: "AttachOrdersToSubscription",
			Handler:    _SubscriptionsService_AttachOrdersToSubscription_Handler,
		},
		{
			MethodName: "GetSubscriptionInvoices",
			Handler:    _SubscriptionsService_GetSubscriptionInvoices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/subscriptions.proto",
}
