// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: billing/invoices.proto

package billing

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InvoicesService_ListInvoices_FullMethodName         = "/billing.InvoicesService/ListInvoices"
	InvoicesService_GenerateInvoice_FullMethodName      = "/billing.InvoicesService/GenerateInvoice"
	InvoicesService_GetInvoice_FullMethodName           = "/billing.InvoicesService/GetInvoice"
	InvoicesService_MarkInvoiceAsPaid_FullMethodName    = "/billing.InvoicesService/MarkInvoiceAsPaid"
	InvoicesService_ListInvoiceLineItems_FullMethodName = "/billing.InvoicesService/ListInvoiceLineItems"
)

// InvoicesServiceClient is the client API for InvoicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoicesServiceClient interface {
	// List all invoices for a subscription
	ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
	// Generate invoice manually (optional)
	GenerateInvoice(ctx context.Context, in *GenerateInvoiceRequest, opts ...grpc.CallOption) (*GenerateInvoiceResponse, error)
	// Get invoice by ID
	GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error)
	// Mark invoice as paid
	MarkInvoiceAsPaid(ctx context.Context, in *MarkInvoiceAsPaidRequest, opts ...grpc.CallOption) (*MarkInvoiceAsPaidResponse, error)
	// List invoice line items
	ListInvoiceLineItems(ctx context.Context, in *ListInvoiceLineItemsRequest, opts ...grpc.CallOption) (*ListInvoiceLineItemsResponse, error)
}

type invoicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoicesServiceClient(cc grpc.ClientConnInterface) InvoicesServiceClient {
	return &invoicesServiceClient{cc}
}

func (c *invoicesServiceClient) ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, InvoicesService_ListInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesServiceClient) GenerateInvoice(ctx context.Context, in *GenerateInvoiceRequest, opts ...grpc.CallOption) (*GenerateInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateInvoiceResponse)
	err := c.cc.Invoke(ctx, InvoicesService_GenerateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesServiceClient) GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceResponse)
	err := c.cc.Invoke(ctx, InvoicesService_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesServiceClient) MarkInvoiceAsPaid(ctx context.Context, in *MarkInvoiceAsPaidRequest, opts ...grpc.CallOption) (*MarkInvoiceAsPaidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkInvoiceAsPaidResponse)
	err := c.cc.Invoke(ctx, InvoicesService_MarkInvoiceAsPaid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesServiceClient) ListInvoiceLineItems(ctx context.Context, in *ListInvoiceLineItemsRequest, opts ...grpc.CallOption) (*ListInvoiceLineItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvoiceLineItemsResponse)
	err := c.cc.Invoke(ctx, InvoicesService_ListInvoiceLineItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoicesServiceServer is the server API for InvoicesService service.
// All implementations must embed UnimplementedInvoicesServiceServer
// for forward compatibility.
type InvoicesServiceServer interface {
	// List all invoices for a subscription
	ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
	// Generate invoice manually (optional)
	GenerateInvoice(context.Context, *GenerateInvoiceRequest) (*GenerateInvoiceResponse, error)
	// Get invoice by ID
	GetInvoice(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error)
	// Mark invoice as paid
	MarkInvoiceAsPaid(context.Context, *MarkInvoiceAsPaidRequest) (*MarkInvoiceAsPaidResponse, error)
	// List invoice line items
	ListInvoiceLineItems(context.Context, *ListInvoiceLineItemsRequest) (*ListInvoiceLineItemsResponse, error)
	mustEmbedUnimplementedInvoicesServiceServer()
}

// UnimplementedInvoicesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInvoicesServiceServer struct{}

func (UnimplementedInvoicesServiceServer) ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (UnimplementedInvoicesServiceServer) GenerateInvoice(context.Context, *GenerateInvoiceRequest) (*GenerateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvoice not implemented")
}
func (UnimplementedInvoicesServiceServer) GetInvoice(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedInvoicesServiceServer) MarkInvoiceAsPaid(context.Context, *MarkInvoiceAsPaidRequest) (*MarkInvoiceAsPaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkInvoiceAsPaid not implemented")
}
func (UnimplementedInvoicesServiceServer) ListInvoiceLineItems(context.Context, *ListInvoiceLineItemsRequest) (*ListInvoiceLineItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoiceLineItems not implemented")
}
func (UnimplementedInvoicesServiceServer) mustEmbedUnimplementedInvoicesServiceServer() {}
func (UnimplementedInvoicesServiceServer) testEmbeddedByValue()                         {}

// UnsafeInvoicesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoicesServiceServer will
// result in compilation errors.
type UnsafeInvoicesServiceServer interface {
	mustEmbedUnimplementedInvoicesServiceServer()
}

func RegisterInvoicesServiceServer(s grpc.ServiceRegistrar, srv InvoicesServiceServer) {
	// If the following call pancis, it indicates UnimplementedInvoicesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InvoicesService_ServiceDesc, srv)
}

func _InvoicesService_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServiceServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoicesService_ListInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServiceServer).ListInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoicesService_GenerateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServiceServer).GenerateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoicesService_GenerateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServiceServer).GenerateInvoice(ctx, req.(*GenerateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoicesService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoicesService_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServiceServer).GetInvoice(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoicesService_MarkInvoiceAsPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkInvoiceAsPaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServiceServer).MarkInvoiceAsPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoicesService_MarkInvoiceAsPaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServiceServer).MarkInvoiceAsPaid(ctx, req.(*MarkInvoiceAsPaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoicesService_ListInvoiceLineItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoiceLineItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServiceServer).ListInvoiceLineItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoicesService_ListInvoiceLineItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServiceServer).ListInvoiceLineItems(ctx, req.(*ListInvoiceLineItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoicesService_ServiceDesc is the grpc.ServiceDesc for InvoicesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoicesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing.InvoicesService",
	HandlerType: (*InvoicesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInvoices",
			Handler:    _InvoicesService_ListInvoices_Handler,
		},
		{
			MethodName: "GenerateInvoice",
			Handler:    _InvoicesService_GenerateInvoice_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _InvoicesService_GetInvoice_Handler,
		},
		{
			MethodName: "MarkInvoiceAsPaid",
			Handler:    _InvoicesService_MarkInvoiceAsPaid_Handler,
		},
		{
			MethodName: "ListInvoiceLineItems",
			Handler:    _InvoicesService_ListInvoiceLineItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/invoices.proto",
}
