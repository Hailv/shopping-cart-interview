// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: organisations/organisations.proto

package organisations

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrganisationsService_HealthCheck_FullMethodName         = "/organisations.OrganisationsService/HealthCheck"
	OrganisationsService_GetOrganisation_FullMethodName     = "/organisations.OrganisationsService/GetOrganisation"
	OrganisationsService_CreateOrganisation_FullMethodName  = "/organisations.OrganisationsService/CreateOrganisation"
	OrganisationsService_UpdateOrganisation_FullMethodName  = "/organisations.OrganisationsService/UpdateOrganisation"
	OrganisationsService_EnableOrganisation_FullMethodName  = "/organisations.OrganisationsService/EnableOrganisation"
	OrganisationsService_DisableOrganisation_FullMethodName = "/organisations.OrganisationsService/DisableOrganisation"
)

// OrganisationsServiceClient is the client API for OrganisationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OrganisationsService provides core organisation functionality including
// CRUD operations, status management, and configuration handling
type OrganisationsServiceClient interface {
	// Health check endpoint to verify service availability and status
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Get an organisation by its unique identifier
	GetOrganisation(ctx context.Context, in *GetOrganisationRequest, opts ...grpc.CallOption) (*GetOrganisationResponse, error)
	// Create a new organisation with configuration and initial status
	CreateOrganisation(ctx context.Context, in *CreateOrganisationRequest, opts ...grpc.CallOption) (*CreateOrganisationResponse, error)
	// Update an existing organisation's configuration and status
	UpdateOrganisation(ctx context.Context, in *UpdateOrganisationRequest, opts ...grpc.CallOption) (*UpdateOrganisationResponse, error)
	// Enable an organisation, setting its status to active
	EnableOrganisation(ctx context.Context, in *EnableOrganisationRequest, opts ...grpc.CallOption) (*EnableOrganisationResponse, error)
	// Disable an organisation, setting its status to inactive
	DisableOrganisation(ctx context.Context, in *DisableOrganisationRequest, opts ...grpc.CallOption) (*DisableOrganisationResponse, error)
}

type organisationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganisationsServiceClient(cc grpc.ClientConnInterface) OrganisationsServiceClient {
	return &organisationsServiceClient{cc}
}

func (c *organisationsServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, OrganisationsService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organisationsServiceClient) GetOrganisation(ctx context.Context, in *GetOrganisationRequest, opts ...grpc.CallOption) (*GetOrganisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganisationResponse)
	err := c.cc.Invoke(ctx, OrganisationsService_GetOrganisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organisationsServiceClient) CreateOrganisation(ctx context.Context, in *CreateOrganisationRequest, opts ...grpc.CallOption) (*CreateOrganisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganisationResponse)
	err := c.cc.Invoke(ctx, OrganisationsService_CreateOrganisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organisationsServiceClient) UpdateOrganisation(ctx context.Context, in *UpdateOrganisationRequest, opts ...grpc.CallOption) (*UpdateOrganisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganisationResponse)
	err := c.cc.Invoke(ctx, OrganisationsService_UpdateOrganisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organisationsServiceClient) EnableOrganisation(ctx context.Context, in *EnableOrganisationRequest, opts ...grpc.CallOption) (*EnableOrganisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableOrganisationResponse)
	err := c.cc.Invoke(ctx, OrganisationsService_EnableOrganisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organisationsServiceClient) DisableOrganisation(ctx context.Context, in *DisableOrganisationRequest, opts ...grpc.CallOption) (*DisableOrganisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableOrganisationResponse)
	err := c.cc.Invoke(ctx, OrganisationsService_DisableOrganisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganisationsServiceServer is the server API for OrganisationsService service.
// All implementations must embed UnimplementedOrganisationsServiceServer
// for forward compatibility.
//
// OrganisationsService provides core organisation functionality including
// CRUD operations, status management, and configuration handling
type OrganisationsServiceServer interface {
	// Health check endpoint to verify service availability and status
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Get an organisation by its unique identifier
	GetOrganisation(context.Context, *GetOrganisationRequest) (*GetOrganisationResponse, error)
	// Create a new organisation with configuration and initial status
	CreateOrganisation(context.Context, *CreateOrganisationRequest) (*CreateOrganisationResponse, error)
	// Update an existing organisation's configuration and status
	UpdateOrganisation(context.Context, *UpdateOrganisationRequest) (*UpdateOrganisationResponse, error)
	// Enable an organisation, setting its status to active
	EnableOrganisation(context.Context, *EnableOrganisationRequest) (*EnableOrganisationResponse, error)
	// Disable an organisation, setting its status to inactive
	DisableOrganisation(context.Context, *DisableOrganisationRequest) (*DisableOrganisationResponse, error)
	mustEmbedUnimplementedOrganisationsServiceServer()
}

// UnimplementedOrganisationsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrganisationsServiceServer struct{}

func (UnimplementedOrganisationsServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedOrganisationsServiceServer) GetOrganisation(context.Context, *GetOrganisationRequest) (*GetOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganisation not implemented")
}
func (UnimplementedOrganisationsServiceServer) CreateOrganisation(context.Context, *CreateOrganisationRequest) (*CreateOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganisation not implemented")
}
func (UnimplementedOrganisationsServiceServer) UpdateOrganisation(context.Context, *UpdateOrganisationRequest) (*UpdateOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganisation not implemented")
}
func (UnimplementedOrganisationsServiceServer) EnableOrganisation(context.Context, *EnableOrganisationRequest) (*EnableOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableOrganisation not implemented")
}
func (UnimplementedOrganisationsServiceServer) DisableOrganisation(context.Context, *DisableOrganisationRequest) (*DisableOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableOrganisation not implemented")
}
func (UnimplementedOrganisationsServiceServer) mustEmbedUnimplementedOrganisationsServiceServer() {}
func (UnimplementedOrganisationsServiceServer) testEmbeddedByValue()                              {}

// UnsafeOrganisationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganisationsServiceServer will
// result in compilation errors.
type UnsafeOrganisationsServiceServer interface {
	mustEmbedUnimplementedOrganisationsServiceServer()
}

func RegisterOrganisationsServiceServer(s grpc.ServiceRegistrar, srv OrganisationsServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrganisationsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrganisationsService_ServiceDesc, srv)
}

func _OrganisationsService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganisationsServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganisationsService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganisationsServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganisationsService_GetOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganisationsServiceServer).GetOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganisationsService_GetOrganisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganisationsServiceServer).GetOrganisation(ctx, req.(*GetOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganisationsService_CreateOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganisationsServiceServer).CreateOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganisationsService_CreateOrganisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganisationsServiceServer).CreateOrganisation(ctx, req.(*CreateOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganisationsService_UpdateOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganisationsServiceServer).UpdateOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganisationsService_UpdateOrganisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganisationsServiceServer).UpdateOrganisation(ctx, req.(*UpdateOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganisationsService_EnableOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganisationsServiceServer).EnableOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganisationsService_EnableOrganisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganisationsServiceServer).EnableOrganisation(ctx, req.(*EnableOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganisationsService_DisableOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganisationsServiceServer).DisableOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganisationsService_DisableOrganisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganisationsServiceServer).DisableOrganisation(ctx, req.(*DisableOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganisationsService_ServiceDesc is the grpc.ServiceDesc for OrganisationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganisationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organisations.OrganisationsService",
	HandlerType: (*OrganisationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _OrganisationsService_HealthCheck_Handler,
		},
		{
			MethodName: "GetOrganisation",
			Handler:    _OrganisationsService_GetOrganisation_Handler,
		},
		{
			MethodName: "CreateOrganisation",
			Handler:    _OrganisationsService_CreateOrganisation_Handler,
		},
		{
			MethodName: "UpdateOrganisation",
			Handler:    _OrganisationsService_UpdateOrganisation_Handler,
		},
		{
			MethodName: "EnableOrganisation",
			Handler:    _OrganisationsService_EnableOrganisation_Handler,
		},
		{
			MethodName: "DisableOrganisation",
			Handler:    _OrganisationsService_DisableOrganisation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organisations/organisations.proto",
}
