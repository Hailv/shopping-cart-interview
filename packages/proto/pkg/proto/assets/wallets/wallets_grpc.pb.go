// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: wallets/wallets.proto

package wallets

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletsService_HealthCheck_FullMethodName  = "/wallets.WalletsService/HealthCheck"
	WalletsService_CreateWallet_FullMethodName = "/wallets.WalletsService/CreateWallet"
)

// WalletsServiceClient is the client API for WalletsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WalletsService provides digital wallet functionality including wallet creation,
// balance management, transaction tracking, and account operations
type WalletsServiceClient interface {
	// Health check endpoint to verify service availability and wallet system status
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Create a new digital wallet for a user with initial balance setup
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
}

type walletsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletsServiceClient(cc grpc.ClientConnInterface) WalletsServiceClient {
	return &walletsServiceClient{cc}
}

func (c *walletsServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, WalletsService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, WalletsService_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletsServiceServer is the server API for WalletsService service.
// All implementations must embed UnimplementedWalletsServiceServer
// for forward compatibility.
//
// WalletsService provides digital wallet functionality including wallet creation,
// balance management, transaction tracking, and account operations
type WalletsServiceServer interface {
	// Health check endpoint to verify service availability and wallet system status
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Create a new digital wallet for a user with initial balance setup
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	mustEmbedUnimplementedWalletsServiceServer()
}

// UnimplementedWalletsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletsServiceServer struct{}

func (UnimplementedWalletsServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedWalletsServiceServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletsServiceServer) mustEmbedUnimplementedWalletsServiceServer() {}
func (UnimplementedWalletsServiceServer) testEmbeddedByValue()                        {}

// UnsafeWalletsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletsServiceServer will
// result in compilation errors.
type UnsafeWalletsServiceServer interface {
	mustEmbedUnimplementedWalletsServiceServer()
}

func RegisterWalletsServiceServer(s grpc.ServiceRegistrar, srv WalletsServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletsService_ServiceDesc, srv)
}

func _WalletsService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletsService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletsService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletsService_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletsService_ServiceDesc is the grpc.ServiceDesc for WalletsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallets.WalletsService",
	HandlerType: (*WalletsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _WalletsService_HealthCheck_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _WalletsService_CreateWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallets/wallets.proto",
}
