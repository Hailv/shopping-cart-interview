// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: adapterstripe/adapterstripe.proto

package adapterstripe

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdapterstripeService_HealthCheck_FullMethodName          = "/adapterstripe.AdapterstripeService/HealthCheck"
	AdapterstripeService_GetPaymentMethod_FullMethodName     = "/adapterstripe.AdapterstripeService/GetPaymentMethod"
	AdapterstripeService_ListPaymentMethods_FullMethodName   = "/adapterstripe.AdapterstripeService/ListPaymentMethods"
	AdapterstripeService_EnablePaymentMethod_FullMethodName  = "/adapterstripe.AdapterstripeService/EnablePaymentMethod"
	AdapterstripeService_DisablePaymentMethod_FullMethodName = "/adapterstripe.AdapterstripeService/DisablePaymentMethod"
	AdapterstripeService_DeletePaymentMethod_FullMethodName  = "/adapterstripe.AdapterstripeService/DeletePaymentMethod"
	AdapterstripeService_CreatePayment_FullMethodName        = "/adapterstripe.AdapterstripeService/CreatePayment"
	AdapterstripeService_UpdatePayment_FullMethodName        = "/adapterstripe.AdapterstripeService/UpdatePayment"
	AdapterstripeService_CreateRefund_FullMethodName         = "/adapterstripe.AdapterstripeService/CreateRefund"
	AdapterstripeService_UpdateRefund_FullMethodName         = "/adapterstripe.AdapterstripeService/UpdateRefund"
)

// AdapterstripeServiceClient is the client API for AdapterstripeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AdapterstripeService provides Stripe payment integration functionality including
// payment method management, transaction processing, and refund operations
type AdapterstripeServiceClient interface {
	// Health check endpoint to verify Stripe adapter service availability and connection status
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Get details of a specific payment method by its code identifier
	GetPaymentMethod(ctx context.Context, in *GetPaymentMethodRequest, opts ...grpc.CallOption) (*GetPaymentMethodResponse, error)
	// List all available payment methods configured in Stripe
	ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsRequest, opts ...grpc.CallOption) (*ListPaymentMethodsResponse, error)
	// Enable a payment method for processing transactions
	EnablePaymentMethod(ctx context.Context, in *EnablePaymentMethodRequest, opts ...grpc.CallOption) (*EnablePaymentMethodResponse, error)
	// Disable a payment method to prevent new transactions
	DisablePaymentMethod(ctx context.Context, in *DisablePaymentMethodRequest, opts ...grpc.CallOption) (*DisablePaymentMethodResponse, error)
	// Delete a payment method permanently from Stripe
	DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, opts ...grpc.CallOption) (*DeletePaymentMethodResponse, error)
	// Create a new payment transaction through Stripe
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	// Update an existing payment transaction in Stripe
	UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*UpdatePaymentResponse, error)
	// Create a new refund for a processed payment through Stripe
	CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error)
	// Update an existing refund transaction in Stripe
	UpdateRefund(ctx context.Context, in *UpdateRefundRequest, opts ...grpc.CallOption) (*UpdateRefundResponse, error)
}

type adapterstripeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdapterstripeServiceClient(cc grpc.ClientConnInterface) AdapterstripeServiceClient {
	return &adapterstripeServiceClient{cc}
}

func (c *adapterstripeServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, AdapterstripeService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterstripeServiceClient) GetPaymentMethod(ctx context.Context, in *GetPaymentMethodRequest, opts ...grpc.CallOption) (*GetPaymentMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentMethodResponse)
	err := c.cc.Invoke(ctx, AdapterstripeService_GetPaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterstripeServiceClient) ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsRequest, opts ...grpc.CallOption) (*ListPaymentMethodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPaymentMethodsResponse)
	err := c.cc.Invoke(ctx, AdapterstripeService_ListPaymentMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterstripeServiceClient) EnablePaymentMethod(ctx context.Context, in *EnablePaymentMethodRequest, opts ...grpc.CallOption) (*EnablePaymentMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnablePaymentMethodResponse)
	err := c.cc.Invoke(ctx, AdapterstripeService_EnablePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterstripeServiceClient) DisablePaymentMethod(ctx context.Context, in *DisablePaymentMethodRequest, opts ...grpc.CallOption) (*DisablePaymentMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisablePaymentMethodResponse)
	err := c.cc.Invoke(ctx, AdapterstripeService_DisablePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterstripeServiceClient) DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, opts ...grpc.CallOption) (*DeletePaymentMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePaymentMethodResponse)
	err := c.cc.Invoke(ctx, AdapterstripeService_DeletePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterstripeServiceClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, AdapterstripeService_CreatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterstripeServiceClient) UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*UpdatePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePaymentResponse)
	err := c.cc.Invoke(ctx, AdapterstripeService_UpdatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterstripeServiceClient) CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRefundResponse)
	err := c.cc.Invoke(ctx, AdapterstripeService_CreateRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterstripeServiceClient) UpdateRefund(ctx context.Context, in *UpdateRefundRequest, opts ...grpc.CallOption) (*UpdateRefundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRefundResponse)
	err := c.cc.Invoke(ctx, AdapterstripeService_UpdateRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdapterstripeServiceServer is the server API for AdapterstripeService service.
// All implementations must embed UnimplementedAdapterstripeServiceServer
// for forward compatibility.
//
// AdapterstripeService provides Stripe payment integration functionality including
// payment method management, transaction processing, and refund operations
type AdapterstripeServiceServer interface {
	// Health check endpoint to verify Stripe adapter service availability and connection status
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Get details of a specific payment method by its code identifier
	GetPaymentMethod(context.Context, *GetPaymentMethodRequest) (*GetPaymentMethodResponse, error)
	// List all available payment methods configured in Stripe
	ListPaymentMethods(context.Context, *ListPaymentMethodsRequest) (*ListPaymentMethodsResponse, error)
	// Enable a payment method for processing transactions
	EnablePaymentMethod(context.Context, *EnablePaymentMethodRequest) (*EnablePaymentMethodResponse, error)
	// Disable a payment method to prevent new transactions
	DisablePaymentMethod(context.Context, *DisablePaymentMethodRequest) (*DisablePaymentMethodResponse, error)
	// Delete a payment method permanently from Stripe
	DeletePaymentMethod(context.Context, *DeletePaymentMethodRequest) (*DeletePaymentMethodResponse, error)
	// Create a new payment transaction through Stripe
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	// Update an existing payment transaction in Stripe
	UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentResponse, error)
	// Create a new refund for a processed payment through Stripe
	CreateRefund(context.Context, *CreateRefundRequest) (*CreateRefundResponse, error)
	// Update an existing refund transaction in Stripe
	UpdateRefund(context.Context, *UpdateRefundRequest) (*UpdateRefundResponse, error)
	mustEmbedUnimplementedAdapterstripeServiceServer()
}

// UnimplementedAdapterstripeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdapterstripeServiceServer struct{}

func (UnimplementedAdapterstripeServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAdapterstripeServiceServer) GetPaymentMethod(context.Context, *GetPaymentMethodRequest) (*GetPaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentMethod not implemented")
}
func (UnimplementedAdapterstripeServiceServer) ListPaymentMethods(context.Context, *ListPaymentMethodsRequest) (*ListPaymentMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentMethods not implemented")
}
func (UnimplementedAdapterstripeServiceServer) EnablePaymentMethod(context.Context, *EnablePaymentMethodRequest) (*EnablePaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePaymentMethod not implemented")
}
func (UnimplementedAdapterstripeServiceServer) DisablePaymentMethod(context.Context, *DisablePaymentMethodRequest) (*DisablePaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePaymentMethod not implemented")
}
func (UnimplementedAdapterstripeServiceServer) DeletePaymentMethod(context.Context, *DeletePaymentMethodRequest) (*DeletePaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentMethod not implemented")
}
func (UnimplementedAdapterstripeServiceServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedAdapterstripeServiceServer) UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayment not implemented")
}
func (UnimplementedAdapterstripeServiceServer) CreateRefund(context.Context, *CreateRefundRequest) (*CreateRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefund not implemented")
}
func (UnimplementedAdapterstripeServiceServer) UpdateRefund(context.Context, *UpdateRefundRequest) (*UpdateRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefund not implemented")
}
func (UnimplementedAdapterstripeServiceServer) mustEmbedUnimplementedAdapterstripeServiceServer() {}
func (UnimplementedAdapterstripeServiceServer) testEmbeddedByValue()                              {}

// UnsafeAdapterstripeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdapterstripeServiceServer will
// result in compilation errors.
type UnsafeAdapterstripeServiceServer interface {
	mustEmbedUnimplementedAdapterstripeServiceServer()
}

func RegisterAdapterstripeServiceServer(s grpc.ServiceRegistrar, srv AdapterstripeServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdapterstripeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdapterstripeService_ServiceDesc, srv)
}

func _AdapterstripeService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterstripeServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterstripeService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterstripeServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterstripeService_GetPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterstripeServiceServer).GetPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterstripeService_GetPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterstripeServiceServer).GetPaymentMethod(ctx, req.(*GetPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterstripeService_ListPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterstripeServiceServer).ListPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterstripeService_ListPaymentMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterstripeServiceServer).ListPaymentMethods(ctx, req.(*ListPaymentMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterstripeService_EnablePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterstripeServiceServer).EnablePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterstripeService_EnablePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterstripeServiceServer).EnablePaymentMethod(ctx, req.(*EnablePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterstripeService_DisablePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterstripeServiceServer).DisablePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterstripeService_DisablePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterstripeServiceServer).DisablePaymentMethod(ctx, req.(*DisablePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterstripeService_DeletePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterstripeServiceServer).DeletePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterstripeService_DeletePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterstripeServiceServer).DeletePaymentMethod(ctx, req.(*DeletePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterstripeService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterstripeServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterstripeService_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterstripeServiceServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterstripeService_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterstripeServiceServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterstripeService_UpdatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterstripeServiceServer).UpdatePayment(ctx, req.(*UpdatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterstripeService_CreateRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterstripeServiceServer).CreateRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterstripeService_CreateRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterstripeServiceServer).CreateRefund(ctx, req.(*CreateRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterstripeService_UpdateRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterstripeServiceServer).UpdateRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterstripeService_UpdateRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterstripeServiceServer).UpdateRefund(ctx, req.(*UpdateRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdapterstripeService_ServiceDesc is the grpc.ServiceDesc for AdapterstripeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdapterstripeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adapterstripe.AdapterstripeService",
	HandlerType: (*AdapterstripeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _AdapterstripeService_HealthCheck_Handler,
		},
		{
			MethodName: "GetPaymentMethod",
			Handler:    _AdapterstripeService_GetPaymentMethod_Handler,
		},
		{
			MethodName: "ListPaymentMethods",
			Handler:    _AdapterstripeService_ListPaymentMethods_Handler,
		},
		{
			MethodName: "EnablePaymentMethod",
			Handler:    _AdapterstripeService_EnablePaymentMethod_Handler,
		},
		{
			MethodName: "DisablePaymentMethod",
			Handler:    _AdapterstripeService_DisablePaymentMethod_Handler,
		},
		{
			MethodName: "DeletePaymentMethod",
			Handler:    _AdapterstripeService_DeletePaymentMethod_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _AdapterstripeService_CreatePayment_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _AdapterstripeService_UpdatePayment_Handler,
		},
		{
			MethodName: "CreateRefund",
			Handler:    _AdapterstripeService_CreateRefund_Handler,
		},
		{
			MethodName: "UpdateRefund",
			Handler:    _AdapterstripeService_UpdateRefund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adapterstripe/adapterstripe.proto",
}
