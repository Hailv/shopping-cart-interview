syntax = "proto3";

package payments;

// import "google/api/annotations.proto";
// import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/cinchprotocol/cinch-api/packages/proto/pkg/proto/assets/payments";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info : {
    title : "Payments API"
    version : "1.0"
    description : "Core payments processing service API for creating, "
                  "managing, and tracking payment transactions including "
                  "webhook handling and status management"
  }
};

// Payment status enum representing the current state of a payment transaction
enum PaymentStatus {
  // Default value indicating no status specified
  PAYMENT_STATUS_UNSPECIFIED = 0;
  // Payment has been initiated but not yet processed or confirmed
  PAYMENT_STATUS_PENDING = 1;
  // Payment has been successfully processed and funds transferred
  PAYMENT_STATUS_COMPLETED = 2;
  // Payment processing failed due to insufficient funds, invalid details, or
  // other errors
  PAYMENT_STATUS_FAILED = 3;
}

// PaymentsService provides comprehensive payment processing functionality
// including transaction creation, status tracking, and payment lifecycle
// management
service PaymentsService {
  // Health check endpoint to verify service availability and payment processing
  // status
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = {
      get : "/v1/payments/health"
    };
  }

  // Create a new payment transaction with user and payment method details
  rpc CreatePayment(CreatePaymentRequest) returns (CreatePaymentResponse) {
    option (google.api.http) = {
      post : "/v1/payments"
      body : "*"
    };
  }

  // Get a payment transaction by its unique identifier with full details
  rpc GetPayment(GetPaymentRequest) returns (GetPaymentResponse) {
    option (google.api.http) = {
      get : "/v1/payments/{payment_id}"
    };
  }

  // List all payment transactions associated with a specific invoice
  rpc ListPaymentsByInvoice(ListPaymentsByInvoiceRequest)
      returns (ListPaymentsByInvoiceResponse) {
    option (google.api.http) = {
      get : "/v1/payments/invoice/{invoice_id}"
    };
  }

  // Update the status of an existing payment transaction
  rpc UpdatePaymentStatus(UpdatePaymentStatusRequest)
      returns (UpdatePaymentStatusResponse) {
    option (google.api.http) = {
      patch : "/v1/payments/{payment_id}/status"
      body : "*"
    };
  }
}

// WebhooksService handles webhook event processing from external payment
// partners, providing secure webhook receipt, validation, and event management
// functionality
service WebhooksService {
  // Health check endpoint to verify webhook service availability and processing
  // status
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = {
      get : "/v1/webhooks/health"
    };
  }

  // Receive and process a webhook event from an external payment partner
  rpc ReceiveWebhook(ReceiveWebhookRequest) returns (ReceiveWebhookResponse) {
    option (google.api.http) = {
      post : "/v1/webhooks"
      body : "*"
    };
  }

  // Get details of a specific webhook event by its unique identifier
  rpc GetWebhook(GetWebhookRequest) returns (GetWebhookResponse) {
    option (google.api.http) = {
      get : "/v1/webhooks/{webhook_id}"
    };
  }

  // List all webhook events received from a specific payment partner
  rpc ListWebhooksByPartner(ListWebhooksByPartnerRequest)
      returns (ListWebhooksByPartnerResponse) {
    option (google.api.http) = {
      get : "/v1/webhooks/partner/{partner_id}"
    };
  }

  // List webhook events from a partner filtered by specific event type
  rpc ListWebhooksByPartnerAndEventType(
      ListWebhooksByPartnerAndEventTypeRequest)
      returns (ListWebhooksByPartnerAndEventTypeResponse) {
    option (google.api.http) = {
      get : "/v1/webhooks/partner/{partner_id}/event/{event_type}"
    };
  }

  // List webhook events from a partner identified by partner code
  rpc ListWebhooksByPartnerCode(ListWebhooksByPartnerCodeRequest)
      returns (ListWebhooksByPartnerCodeResponse) {
    option (google.api.http) = {
      get : "/v1/webhooks/partner-code/{partner_code}"
    };
  }
}

// Health check request message - no parameters required
message HealthCheckRequest {}

// Health check response containing service status information
message HealthCheckResponse {
  // Service status indicator (e.g., "healthy", "degraded", "unhealthy")
  string status = 1;
}

// Request message for creating a new payment transaction
message CreatePaymentRequest {
  // Unique identifier for the user initiating the payment (UUID format)
  string user_id = 1;
  // Payment amount in the base currency unit (e.g., dollars, not cents)
  double amount = 2;
  // Code identifying the payment method to use for this transaction
  string payment_method_code = 3;
  // Unique identifier of the invoice this payment is for (UUID format)
  string invoice_id = 4;
}

// Response message containing the created payment transaction details
message CreatePaymentResponse {
  // Unique identifier of the created payment transaction (UUID format)
  string payment_id = 1;
  // Current status of the payment transaction
  PaymentStatus status = 2;
  // Confirmed payment amount that was processed
  double amount = 3;
  // Timestamp when the payment was created (ISO 8601 format)
  string created_at = 4;
}

// Request message for retrieving a payment transaction by ID
message GetPaymentRequest {
  // Unique identifier of the payment to retrieve (UUID format)
  string payment_id = 1;
}

// Response message containing complete payment transaction details
message GetPaymentResponse {
  // Unique identifier of the payment transaction (UUID format)
  string payment_id = 1;
  // Identifier of the payment method used for this transaction (UUID format)
  string payment_method_id = 2;
  // Identifier of the invoice this payment is associated with (UUID format)
  string invoice_id = 3;
  // Payment amount in the base currency unit
  double amount = 4;
  // Current status of the payment transaction
  PaymentStatus status = 5;
  // Due date for the payment (ISO 8601 format)
  string due_on = 6;
  // Timestamp when the payment was completed, null if not yet paid (ISO 8601
  // format)
  string paid_at = 7;
  // Timestamp when the payment was created (ISO 8601 format)
  string created_at = 8;
  // Timestamp when the payment was last updated (ISO 8601 format)
  string updated_at = 9;
}

// List payments by invoice messages
message ListPaymentsByInvoiceRequest { string invoice_id = 1; }

message ListPaymentsByInvoiceResponse {
  repeated GetPaymentResponse payments = 1;
}

// Update payment status messages
message UpdatePaymentStatusRequest {
  string payment_id = 1;
  PaymentStatus status = 2;
}

message UpdatePaymentStatusResponse {
  string payment_id = 1;
  PaymentStatus status = 2;
  string updated_at = 3; // ISO 8601 date string
}

// Receive webhook messages
message ReceiveWebhookRequest {
  string partner_id = 1;
  string partner_webhook_id = 2;
  string partner_event_type = 3;
  string partner_payment_id = 4;
  string partner_refund_id = 5;
  string method = 6;
  string url = 7;
  map<string, string> headers = 8;
  bytes payload = 9;
}

message ReceiveWebhookResponse { string webhook_id = 1; }

// Get webhook messages
message GetWebhookRequest { string webhook_id = 1; }

message GetWebhookResponse {
  string webhook_id = 1;
  string partner_id = 2;
  string partner_webhook_id = 3;
  string partner_event_type = 4;
  string partner_payment_id = 5;
  string partner_refund_id = 6;
  string method = 7;
  string url = 8;
  map<string, string> headers = 9;
  bytes payload = 10;
  string received_at = 11;  // ISO 8601 date string
  string processed_at = 12; // ISO 8601 date string, optional
  string created_at = 13;   // ISO 8601 date string
  string updated_at = 14;   // ISO 8601 date string
}

// List webhooks by partner messages
message ListWebhooksByPartnerRequest {
  string partner_id = 1;
  int32 limit = 2;
}

message ListWebhooksByPartnerResponse {
  repeated GetWebhookResponse webhooks = 1;
}

// List webhooks by partner and event type messages
message ListWebhooksByPartnerAndEventTypeRequest {
  string partner_id = 1;
  string event_type = 2;
  int32 limit = 3;
}

message ListWebhooksByPartnerAndEventTypeResponse {
  repeated GetWebhookResponse webhooks = 1;
}

// List webhooks by partner code messages
message ListWebhooksByPartnerCodeRequest {
  string partner_code = 1;
  int32 limit = 2;
}

message ListWebhooksByPartnerCodeResponse {
  repeated GetWebhookResponse webhooks = 1;
}
