syntax = "proto3";

package cart;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/cinchprotocol/cinch-api/packages/proto/pkg/proto/assets/cart";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Stripe Adapter API"
    version: "1.0"
    description: "Stripe payment adapter service API providing integration with Stripe payment processing including payment methods, transactions, and refund management"
  }
};

// CartService provides Stripe payment integration functionality including
// payment method management, transaction processing, and refund operations
service CartService {
  // Health check endpoint to verify Stripe adapter service availability and connection status
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = {get: "/v1/stripe/health"};
  }

  // Get details of a specific payment method by its code identifier
  rpc GetPaymentMethod(GetPaymentMethodRequest) returns (GetPaymentMethodResponse) {
    option (google.api.http) = {get: "/v1/stripe/payment-methods/{payment_method_code}"};
  }

  // List all available payment methods configured in Stripe
  rpc ListPaymentMethods(ListPaymentMethodsRequest) returns (ListPaymentMethodsResponse) {
    option (google.api.http) = {get: "/v1/stripe/payment-methods"};
  }

  // Enable a payment method for processing transactions
  rpc EnablePaymentMethod(EnablePaymentMethodRequest) returns (EnablePaymentMethodResponse) {
    option (google.api.http) = {
      post: "/v1/stripe/payment-methods/{payment_method_code}/enable"
      body: "*"
    };
  }

  // Disable a payment method to prevent new transactions
  rpc DisablePaymentMethod(DisablePaymentMethodRequest) returns (DisablePaymentMethodResponse) {
    option (google.api.http) = {
      post: "/v1/stripe/payment-methods/{payment_method_code}/disable"
      body: "*"
    };
  }

  // Delete a payment method permanently from Stripe
  rpc DeletePaymentMethod(DeletePaymentMethodRequest) returns (DeletePaymentMethodResponse) {
    option (google.api.http) = {delete: "/v1/stripe/payment-methods/{payment_method_code}"};
  }

  // Create a new payment transaction through Stripe
  rpc CreatePayment(CreatePaymentRequest) returns (CreatePaymentResponse) {
    option (google.api.http) = {
      post: "/v1/stripe/payments"
      body: "*"
    };
  }

  // Update an existing payment transaction in Stripe
  rpc UpdatePayment(UpdatePaymentRequest) returns (UpdatePaymentResponse) {
    option (google.api.http) = {
      put: "/v1/stripe/payments/{payment_id}"
      body: "*"
    };
  }

  // Create a new refund for a processed payment through Stripe
  rpc CreateRefund(CreateRefundRequest) returns (CreateRefundResponse) {
    option (google.api.http) = {
      post: "/v1/stripe/refunds"
      body: "*"
    };
  }

  // Update an existing refund transaction in Stripe
  rpc UpdateRefund(UpdateRefundRequest) returns (UpdateRefundResponse) {
    option (google.api.http) = {
      put: "/v1/stripe/refunds/{refund_id}"
      body: "*"
    };
  }
}

// Health check messages
message HealthCheckRequest {}

message HealthCheckResponse {
  string status = 1;
}

// Create payment messages
message CreatePaymentRequest {
  Payment payment = 1;
}

message CreatePaymentResponse {
  Payment payment = 1;
}

// Update payment messages
message UpdatePaymentRequest {
  string payment_id = 1;
  Payment payment = 2;
  Webhook webhook = 3;
}

message UpdatePaymentResponse {
  Payment payment = 1;
}

// Create refund messages
message CreateRefundRequest {
  Payment payment = 1; // Original payment
  Refund refund = 2; // New refund to create
}

message CreateRefundResponse {
  Refund refund = 1;
}

// Update refund messages
message UpdateRefundRequest {
  string refund_id = 1;
  string partner_refund_id = 2; // Stripe refund ID
  string status = 3;
  string event_type = 4; // Type of webhook event
  string event_id = 5; // Stripe event ID
  map<string, string> metadata = 6; // Additional event metadata
}

message UpdateRefundResponse {
  Refund refund = 1;
}

// GetPaymentMethodRequest is the request for getting a payment method
message GetPaymentMethodRequest {
  string payment_method_code = 1; // VARCHAR(70)
}

// GetPaymentMethodResponse is the response for getting a payment method
message GetPaymentMethodResponse {
  PaymentMethod payment_method = 1;
}

// ListPaymentMethodsRequest is the request for listing payment methods
message ListPaymentMethodsRequest {}

// ListPaymentMethodsResponse is the response for listing payment methods
message ListPaymentMethodsResponse {
  repeated PaymentMethod payment_methods = 1;
}

// PaymentMethod represents a payment method in the system
message PaymentMethod {
  string id = 1; // BINARY(16)
  string payment_method_code = 2; // VARCHAR(70)
  string name = 3; // VARCHAR(255)
  string description = 4; // TEXT
  string status = 5; // ENUM('active', 'inactive')
  string created_at = 6; // DATETIME
  string updated_at = 7; // DATETIME
  string deleted_at = 8; // DATETIME
}

// Refund represents a refund in the system
message Refund {
  string id = 1;
  string payment_id = 2;
  double amount = 3;
  string reason = 4;
  string status = 5;
  string created_at = 6; // ISO 8601 date string
  string updated_at = 7; // ISO 8601 date string
  repeated RefundAttempt attempts = 8;
}

// RefundAttempt represents a refund attempt in the system
message RefundAttempt {
  string id = 1;
  string refund_id = 2;
  string partner_id = 3;
  string status = 4;
  string partner_refund_id = 5; // Stripe refund ID
  string error_message = 6; // Optional error message if processing failed
  string created_at = 7; // ISO 8601 date string
  string updated_at = 8; // ISO 8601 date string
}

// Payment represents a payment in the system
message Payment {
  string id = 1; // BINARY(16)
  string payment_method_id = 2; // BINARY(16)
  string invoice_id = 3; // BINARY(16)
  double amount = 4; // NUMERIC(12,2)
  string status = 5; // ENUM('pending', 'paid', 'failed', 'partially_refunded', 'refunded')
  string due_on = 6; // DATETIME
  string paid_at = 7; // DATETIME
  string created_at = 8; // DATETIME
  string updated_at = 9; // DATETIME
  repeated PaymentAttempt attempts = 10;
  repeated Refund refunds = 11;
}

// PaymentAttempt represents a payment attempt in the system
message PaymentAttempt {
  string id = 1; // BINARY(16)
  string payment_id = 2; // BINARY(16)
  string payment_method_id = 3; // BINARY(16)
  string partner_id = 4; // BINARY(16)
  string partner_code = 5; // VARCHAR(70)
  string status = 6; // ENUM('pending', 'paid', 'failed', 'partially_refunded', 'refunded')
  string partner_payment_id = 7; // Stripe payment ID
  string redirect_url = 8; // Optional URL for redirect-based payment flows
  string error_message = 9; // Optional error message if processing failed
  string created_at = 10; // DATETIME
}

// EnablePaymentMethodRequest is the request for enabling a payment method
message EnablePaymentMethodRequest {
  string payment_method_code = 1; // VARCHAR(70)
}

// EnablePaymentMethodResponse is the response for enabling a payment method
message EnablePaymentMethodResponse {}

// DisablePaymentMethodRequest is the request for disabling a payment method
message DisablePaymentMethodRequest {
  string payment_method_code = 1; // VARCHAR(70)
}

// DisablePaymentMethodResponse is the response for disabling a payment method
message DisablePaymentMethodResponse {}

// DeletePaymentMethodRequest is the request for deleting a payment method
message DeletePaymentMethodRequest {
  string payment_method_code = 1; // VARCHAR(70)
}

// DeletePaymentMethodResponse is the response for deleting a payment method
message DeletePaymentMethodResponse {}

// Webhook represents a webhook event in the system
message Webhook {
  string id = 1;
  string partner_payment_id = 2;
  string partner_event_type = 3;
  string partner_webhook_id = 4;
  string method = 5;
  string url = 6;
  bytes headers = 7;
  bytes payload = 8;
}
