// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package db

import (
	"context"
)

const deletePaymentMethodByCode = `-- name: DeletePaymentMethodByCode :exec
DELETE FROM payment_methods
WHERE payment_method_code = ?
`

func (q *Queries) DeletePaymentMethodByCode(ctx context.Context, paymentMethodCode string) error {
	_, err := q.db.ExecContext(ctx, deletePaymentMethodByCode, paymentMethodCode)
	return err
}

const disablePaymentMethodByCode = `-- name: DisablePaymentMethodByCode :exec
UPDATE payment_methods
SET
  status = 'inactive',
  updated_at = CURRENT_TIMESTAMP
WHERE payment_method_code = ?
`

func (q *Queries) DisablePaymentMethodByCode(ctx context.Context, paymentMethodCode string) error {
	_, err := q.db.ExecContext(ctx, disablePaymentMethodByCode, paymentMethodCode)
	return err
}

const enablePaymentMethodByCode = `-- name: EnablePaymentMethodByCode :exec
UPDATE payment_methods
SET
  status = 'active',
  updated_at = CURRENT_TIMESTAMP
WHERE payment_method_code = ?
`

func (q *Queries) EnablePaymentMethodByCode(ctx context.Context, paymentMethodCode string) error {
	_, err := q.db.ExecContext(ctx, enablePaymentMethodByCode, paymentMethodCode)
	return err
}

const getPaymentMethodByCode = `-- name: GetPaymentMethodByCode :one
SELECT
  id,
  payment_method_code,
  partner_pm_type,
  display_name,
  config,
  status,
  created_at,
  updated_at
FROM payment_methods
WHERE payment_method_code = ?
`

func (q *Queries) GetPaymentMethodByCode(ctx context.Context, paymentMethodCode string) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, getPaymentMethodByCode, paymentMethodCode)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.PaymentMethodCode,
		&i.PartnerPmType,
		&i.DisplayName,
		&i.Config,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPaymentMethods = `-- name: ListPaymentMethods :many
SELECT
  id,
  payment_method_code,
  partner_pm_type,
  display_name,
  config,
  status,
  created_at,
  updated_at
FROM payment_methods
ORDER BY created_at DESC
`

func (q *Queries) ListPaymentMethods(ctx context.Context) ([]PaymentMethod, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentMethods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentMethod{}
	for rows.Next() {
		var i PaymentMethod
		if err := rows.Scan(
			&i.ID,
			&i.PaymentMethodCode,
			&i.PartnerPmType,
			&i.DisplayName,
			&i.Config,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
